// source: trx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.types.TrxPayloadContractProto', null, global);
goog.exportSymbol('proto.types.TrxProto', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TrxProto = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TrxProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.TrxProto.displayName = 'proto.types.TrxProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TrxPayloadContractProto = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TrxPayloadContractProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.TrxPayloadContractProto.displayName =
    'proto.types.TrxPayloadContractProto';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.types.TrxProto.prototype.toObject = function (opt_includeInstance) {
    return proto.types.TrxProto.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.types.TrxProto} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.TrxProto.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        version: jspb.Message.getFieldWithDefault(msg, 1, 0),
        time: jspb.Message.getFieldWithDefault(msg, 2, 0),
        nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
        from: msg.getFrom_asB64(),
        to: msg.getTo_asB64(),
        amount: msg.getAmount_asB64(),
        gas: jspb.Message.getFieldWithDefault(msg, 7, 0),
        gasprice: msg.getGasprice_asB64(),
        type: jspb.Message.getFieldWithDefault(msg, 9, 0),
        payload: msg.getPayload_asB64(),
        sig: msg.getSig_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TrxProto}
 */
proto.types.TrxProto.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TrxProto();
  return proto.types.TrxProto.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TrxProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TrxProto}
 */
proto.types.TrxProto.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTime(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNonce(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setFrom(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTo(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAmount(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setGas(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setGasprice(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setType(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPayload(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TrxProto.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.types.TrxProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TrxProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TrxProto.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getGasprice_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(9, f);
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(11, f);
  }
};

/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.types.TrxProto.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.types.TrxProto.prototype.getTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setTime = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 nonce = 3;
 * @return {number}
 */
proto.types.TrxProto.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setNonce = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes from = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.TrxProto.prototype.getFrom = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 4, '')
  );
};

/**
 * optional bytes from = 4;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.types.TrxProto.prototype.getFrom_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getFrom()));
};

/**
 * optional bytes from = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.types.TrxProto.prototype.getFrom_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getFrom()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setFrom = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes to = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.TrxProto.prototype.getTo = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 5, '')
  );
};

/**
 * optional bytes to = 5;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.types.TrxProto.prototype.getTo_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTo()));
};

/**
 * optional bytes to = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.types.TrxProto.prototype.getTo_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTo()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setTo = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional bytes _amount = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.TrxProto.prototype.getAmount = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 6, '')
  );
};

/**
 * optional bytes _amount = 6;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.types.TrxProto.prototype.getAmount_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAmount()));
};

/**
 * optional bytes _amount = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.types.TrxProto.prototype.getAmount_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAmount()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setAmount = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * optional uint64 gas = 7;
 * @return {number}
 */
proto.types.TrxProto.prototype.getGas = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setGas = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional bytes _gasPrice = 8;
 * @return {!(string|Uint8Array)}
 */
proto.types.TrxProto.prototype.getGasprice = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 8, '')
  );
};

/**
 * optional bytes _gasPrice = 8;
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {string}
 */
proto.types.TrxProto.prototype.getGasprice_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getGasprice()));
};

/**
 * optional bytes _gasPrice = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {!Uint8Array}
 */
proto.types.TrxProto.prototype.getGasprice_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getGasprice())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setGasprice = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional int32 type = 9;
 * @return {number}
 */
proto.types.TrxProto.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setType = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional bytes _payload = 10;
 * @return {!(string|Uint8Array)}
 */
proto.types.TrxProto.prototype.getPayload = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 10, '')
  );
};

/**
 * optional bytes _payload = 10;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.types.TrxProto.prototype.getPayload_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};

/**
 * optional bytes _payload = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.types.TrxProto.prototype.getPayload_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setPayload = function (value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * optional bytes sig = 11;
 * @return {!(string|Uint8Array)}
 */
proto.types.TrxProto.prototype.getSig = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 11, '')
  );
};

/**
 * optional bytes sig = 11;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.types.TrxProto.prototype.getSig_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSig()));
};

/**
 * optional bytes sig = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.types.TrxProto.prototype.getSig_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSig()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.TrxProto} returns this
 */
proto.types.TrxProto.prototype.setSig = function (value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.types.TrxPayloadContractProto.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.types.TrxPayloadContractProto.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.types.TrxPayloadContractProto} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.TrxPayloadContractProto.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        data: msg.getData_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TrxPayloadContractProto}
 */
proto.types.TrxPayloadContractProto.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TrxPayloadContractProto();
  return proto.types.TrxPayloadContractProto.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TrxPayloadContractProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TrxPayloadContractProto}
 */
proto.types.TrxPayloadContractProto.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TrxPayloadContractProto.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.types.TrxPayloadContractProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TrxPayloadContractProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TrxPayloadContractProto.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes _data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.TrxPayloadContractProto.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 1, '')
  );
};

/**
 * optional bytes _data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.types.TrxPayloadContractProto.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes _data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.types.TrxPayloadContractProto.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.TrxPayloadContractProto} returns this
 */
proto.types.TrxPayloadContractProto.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

goog.object.extend(exports, proto.types);
